name: "Generate SAS token action"
description: "Generate SAS token"

inputs:
  storageaccount:
    description: "The Storage Account to create a SAS token for."
    required: true
  fileshare:
    description: "The Fileshare to create a SAS token for."
    required: true
  container:
    description: "The Blob container to create a SAS token for."
    required: true
  password:
    description: "The Password to use for the SAS token zip file."
    required: true
  action:
    description: "The type of SAS token to create."
    required: true
  validity:
    description: "The validity of the SAS token in days."
    required: true
    
runs:
  using: "composite"
  steps:    
    - name: Masking password
      shell: bash
      run: |
        PASSWORD=$(jq -r '.inputs.password' $GITHUB_EVENT_PATH)
        echo ::add-mask::$PASSWORD

    # - name: Validate empty inputs
    #   if: ${{ (inputs.fileshare == '' && inputs.container == '') || (inputs.fileshare != '' && inputs.container != '') }}
    #   run: |
    #     echo "A Fileshare or Blob container name must be given as an input"

    - name: Check if fileshare or blob container input has been provided
      if: (inputs.fileshare == '' && inputs.container == '')
      shell: bash
      run: |
        echo "------------------------------------------------------------------------------------------------------"
        echo "A Fileshare or Blob container name must be given as an input"
        echo "------------------------------------------------------------------------------------------------------"

        {
        echo "------------------------------------------------------------------------------------------------------"
        echo "#### A Fileshare or Blob container name must be given as an input"
        echo "------------------------------------------------------------------------------------------------------"
        } >> $GITHUB_STEP_SUMMARY

        exit 1

    - name: Check if both fileshare and blob container input has been provided
      if: (inputs.fileshare != '' && inputs.container != '')
      shell: bash
      run: |
        echo "------------------------------------------------------------------------------------------------------"
        echo "Only one of Fileshare or Blob container name can be given as an input"
        echo "------------------------------------------------------------------------------------------------------"

        {
        echo "------------------------------------------------------------------------------------------------------"
        echo "#### Only one of Fileshare or Blob container name can be given as an input"
        echo "------------------------------------------------------------------------------------------------------"
        } >> $GITHUB_STEP_SUMMARY

        exit 1


    # - name: Validate inputs
    #   if: always()
    #   shell: bash
    #   run: |
    #     if [[ "${{ inputs.fileshare }}" == "" ]] && [[ "${{ inputs.container }}" == "" ]]

    #     then
    #       echo "A Fileshare or Blob container name must be given as an input"
    #       exit 1
        
    #     elif [[ ${{ inputs.fileshare }} ]] && [[ ${{ inputs.container }} ]]
    #     then
    #       echo "Only one of Fileshare or Blob container name can be given as an input"
    #       exit 1

    #     else
    #       echo "One of Fileshare or Blob container name has been given as an input"
    #     fi

    - name: Check password complexity
      if: always()
      shell: bash
      run: |
        regex="^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[\!@#$%^&*?])[A-Za-z\d\!@#$%^&*?]{12,}$"

        if [[ $(echo ${{ inputs.password }} | grep -P "$regex") ]]; then

          echo "Password matches the required complexity."

        else

          echo "------------------------------------------------------------------------------------------------------"
          echo "Password does not meet the required complexity."
          echo "------------------------------------------------------------------------------------------------------"
          echo "Must be at least 12 characters"
          echo "Must contain at least one lowercase letter"
          echo "Must contain at least one uppercase letter"
          echo "Must contain at least one special character - Special characters can only be one of !@#$%^&*?"
          echo "Must contain at least one number"
          echo "------------------------------------------------------------------------------------------------------"

          {
          echo "------------------------------------------------------------------------------------------------------"
          echo "### Password does not meet the required complexity."
          echo "------------------------------------------------------------------------------------------------------"
          echo "#### - Must be at least 12 characters"
          echo "#### - Must contain at least one lowercase letter"
          echo "#### - Must contain at least one uppercase letter"
          echo "#### - Must contain at least one special character - Special characters can only be one of !@#$%^&*?"
          echo "#### - Must contain at least one number"
          echo "------------------------------------------------------------------------------------------------------"
          } >> $GITHUB_STEP_SUMMARY

          exit 1
        fi
    
    - name: Check SAS token validity
      if: always()
      shell: bash
      run: |
        if [[  "${{ inputs.action }}" == "read" && ${{ inputs.validity }} -gt 365 ]]; then
          echo "------------------------------------------------------------------------------------------------------"
          echo "Specified SAS token validity is longer then the allowed maximum duration of 1 year (365 days)"
          echo "------------------------------------------------------------------------------------------------------"

          {
          echo "------------------------------------------------------------------------------------------------------"
          echo "#### Specified SAS token validity is longer then the allowed maximum duration of 1 year (365 days)"
          echo "------------------------------------------------------------------------------------------------------"
          } >> $GITHUB_STEP_SUMMARY

          exit 1
        
        elif [[ "${{ inputs.action }}" == "write" && ${{ inputs.validity }} -gt 31 ]]; then
          echo "------------------------------------------------------------------------------------------------------"
          echo "Specified SAS token validity is longer then the allowed maximum duration of 1 Month year (31 days)"
          echo "------------------------------------------------------------------------------------------------------"

          {
          echo "------------------------------------------------------------------------------------------------------"
          echo "#### Specified SAS token validity is longer then the allowed maximum duration of 1 Month year (31 days)"
          echo "------------------------------------------------------------------------------------------------------"
          } >> $GITHUB_STEP_SUMMARY

          exit 1

        else
          echo "Specified SAS token validity is within the maximum duration"
        fi


    - name: Set SAS token variables
      shell: bash
      run: |
        if [[ "${{ inputs.fileshare }}" != "" ]]; then
          echo "Fileshare inputs has been given as input"
          echo "SAS_TOKEN_TYPE=fileshare" >> $GITHUB_ENV
        
        elif [[ "${{ inputs.container }}" != "" ]]; then
          echo "Blob container name has been given as input"
          echo "SAS_TOKEN_TYPE=container" >> $GITHUB_ENV
        fi    

        if [[ ${{ inputs.action }} == 'read' ]]; then 
          echo "SAS_TOKEN_PERMISSION=lr" >> $GITHUB_ENV

        elif [[ ${{ inputs.action }} == 'write' ]]; then
          echo "SAS_TOKEN_PERMISSION=cdlrw" >> $GITHUB_ENV
        fi



    - name: Generate SAS token
      shell: bash
      run: |
        endDate=`date -u -d "${{ inputs.validity }} days" '+%Y-%m-%dT%H:%MZ'`

        if [[ "${{ env.SAS_TOKEN_TYPE}}" == "fileshare" ]]; then

          sasToken=$(az storage share generate-sas \
            --name "${{ inputs.fileshare }}" \
            --permissions ${{ env.SAS_TOKEN_PERMISSION }} \
            --account-name "${{ inputs.storageaccount }}" \
            --expiry ${endDate} \
            --https-only \
            -o tsv) 

          # masks output of sasToken
          echo "::add-mask::${sasToken}"

          echo "STORAGE_SAS_TOKEN=${sasToken}" >> $GITHUB_ENV
          echo "SAS_END_DATE=${endDate}" >> $GITHUB_ENV

          echo "------------------------------------------------------------------------------------------------------"
          echo "this is a fileshare SAS"
          echo "------------------------------------------------------------------------------------------------------"
        
        elif [[ "${{ env.SAS_TOKEN_TYPE}}" == "container" ]]; then

          sasToken=$(az storage container generate-sas \
            --name "${{ inputs.container }}" \
            --account-name "${{ inputs.storageaccount }}" \
            --permissions ${{ env.SAS_TOKEN_PERMISSION }} \
            --expiry ${endDate} \
            --https-only \
            -o tsv) 

          # masks output of sasToken
          echo "::add-mask::${sasToken}"

          echo "STORAGE_SAS_TOKEN=${sasToken}" >> $GITHUB_ENV
          echo "SAS_END_DATE=${endDate}" >> $GITHUB_ENV

          echo "------------------------------------------------------------------------------------------------------"
          echo "this is a Blob container SAS"
          echo "------------------------------------------------------------------------------------------------------"



    # - name: Generate fileshare SAS token
    #   if: env.SAS_TOKEN_TYPE == 'fileshare'
    #   shell: bash
    #   run: |
    #     endDate=`date -u -d "${{ inputs.validity }} days" '+%Y-%m-%dT%H:%MZ'`

    #     sasToken=$(az storage share generate-sas \
    #       --name "${{ inputs.fileshare }}" \
    #       --permissions ${{ env.SAS_TOKEN_PERMISSION }} \
    #       --account-name "${{ inputs.storageaccount }}" \
    #       --expiry ${endDate} \
    #       --https-only \
    #       -o tsv) 

    #     # masks output of sasToken
    #     echo "::add-mask::${sasToken}"

    #     echo "STORAGE_SAS_TOKEN=${sasToken}" >> $GITHUB_ENV
    #     echo "SAS_END_DATE=${endDate}" >> $GITHUB_ENV

    # - name: Generate Blob container SAS token
    #   if: env.SAS_TOKEN_TYPE == 'container'
    #   shell: bash
    #   run: |
    #     endDate=`date -u -d "${{ inputs.validity }} days" '+%Y-%m-%dT%H:%MZ'`

    #     sasToken=$(az storage container generate-sas \
    #       --name "${{ inputs.container }}" \
    #       --account-name "${{ inputs.storageaccount }}" \
    #       --permissions ${{ env.SAS_TOKEN_PERMISSION }} \
    #       --expiry ${endDate} \
    #       --https-only \
    #       -o tsv) 

    #     # masks output of sasToken
    #     echo "::add-mask::${sasToken}"

    #     echo "STORAGE_SAS_TOKEN=${sasToken}" >> $GITHUB_ENV
    #     echo "SAS_END_DATE=${endDate}" >> $GITHUB_ENV

    - name: Generate SAS token ZIP
      shell: bash
      run: |
        cat <<EOF >sas_token.txt
          Type of Token: ${{ env.SAS_TOKEN_TYPE }}
          Token Capability: ${{ inputs.action }}
          End date: ${{ env.SAS_END_DATE }}
          SAS token: ?${{ env.STORAGE_SAS_TOKEN }}
        EOF

        zip -P ${{ inputs.password }} "sas_token" "sas_token.txt"

    - name: Upload the SAS token ZIP
      uses: actions/upload-artifact@v3
      with:
        name: SAS_TOKEN_${{ inputs.action }}_ZIP
        path: sas_token.zip


    - name: output SAS token
      shell: bash
      run: |
        if [[ "${{ env.SAS_TOKEN_TYPE}}" == "fileshare" ]]; then
          {
            echo "### Workflow variables"
            echo "| Variable   | Value       |"
            echo "| ---------- | ----------- |"
            echo "| Fileshare SAS token | ${{ env.STORAGE_SAS_TOKEN }} |"
            echo "| Fileshare SAS URL | https://${{ inputs.storageaccount }}.file.core.windows.net/${{ inputs.fileshare }}${{ env.STORAGE_SAS_TOKEN }} |"
          } >> $GITHUB_STEP_SUMMARY
        
        elif [[ "${{ env.SAS_TOKEN_TYPE}}" == "container" ]]; then
          {
            echo "### Workflow variables"
            echo "| Variable   | Value       |"
            echo "| ---------- | ----------- |"
            echo "| Blob container SAS token | ${{ env.STORAGE_SAS_TOKEN }} |"
            echo "| Blob container SAS URL | https://${{ inputs.storageaccount }}.blob.core.windows.net/${{ inputs.container }}${{ env.STORAGE_SAS_TOKEN }} |"
          } >> $GITHUB_STEP_SUMMARY

        fi

    # - name: output Fileshare SAS token
    #   if: env.SAS_TOKEN_TYPE == 'fileshare'
    #   shell: bash
    #   run: |
    #     {
    #       echo "### Workflow variables"
    #       echo "| Variable   | Value       |"
    #       echo "| ---------- | ----------- |"
    #       echo "| Fileshare SAS token  | ${{ env.STORAGE_SAS_TOKEN }} |"
    #       echo "| Fileshare SAS URL | https://${{ inputs.storageaccount }}.file.core.windows.net/${{ inputs.fileshare }}${{ env.STORAGE_SAS_TOKEN }} |"
    #     } >> $GITHUB_STEP_SUMMARY

    # - name: output Blob container SAS token
    #   if: env.SAS_TOKEN_TYPE == 'container'
    #   shell: bash
    #   run: |
    #     {
    #       echo "### Workflow variables"
    #       echo "| Variable   | Value       |"
    #       echo "| ---------- | ----------- |"
    #       echo "| Blob container SAS token  | ${{ env.STORAGE_SAS_TOKEN }} |"
    #       echo "| Blob container SAS URL | https://${{ inputs.storageaccount }}.blob.core.windows.net/${{ inputs.fileshare }}${{ env.STORAGE_SAS_TOKEN }} |"
    #     } >> $GITHUB_STEP_SUMMARY


