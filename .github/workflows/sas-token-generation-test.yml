on:
  workflow_dispatch:
    inputs:
      # location:
      #   description: "Hub Location (weu / frc)"
      #   type: choice
      #   required: true
      #   options:
      #     - 'weu'
      #     - 'frc'
      storageaccount:
        description: "Storage Account to create a SAS token for"
        type: string
        default: 'fileshareazcopy66e4bd71'
      fileshare:
        description: "Fileshare to create a SAS token for"
        type: string
        default: 'dev'
      password:
        description: "Password to use for the SAS token zip file"
        type: string
        default: ''
      action:
        description: "Password to use for the SAS token zip file"
        type: choice
        options:
          - 'read'
          - 'write'

name: Generate SAS token - test
run-name: Generate SAS token | ${{ inputs.storageaccount }} | ${{ inputs.fileshare }} | ${{ inputs.password }}
          
permissions:
  id-token: write
  contents: read
  issues: write 

jobs:
  generate-sas-token:
    runs-on: ubuntu-latest
    environment: 'fakkel'
      
    steps:
      - name: '${{ github.ref_name }} to ${{ inputs.location }} ${{ inputs.tenant }}'
        run: echo ""
        
      # - name: Log inputs
      #   run: |
      #     echo "Running with the following input:"
      #     echo "${{ toJSON(inputs) }}"

      # - name: Check Tag
      #   run: |
      #     regex="^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[\!@#$%^&*?])[A-Za-z\d\!@#$%^&*?]{12,}$"

      #     if [[ $(echo ${{ inputs.password }} | grep -P "$regex") ]]; then
      #       echo "Input string matches the regex pattern."
      #     else
      #       echo "Input string does not match the regex pattern."
      #       exit 1
      #     fi

      #     input_string="YourIn@put32StringHere"

      #     if [[ $(echo "$input_string" | grep -P "$regex") ]]; then
      #       echo "Input string matches the regex pattern."
      #     else
      #       echo "Input string does not match the regex pattern."
      #     fi

      #     echo "test"



      - name: Masking password
        run: |
          PASSWORD=$(jq -r '.inputs.password' $GITHUB_EVENT_PATH)

          echo Before mask
          echo $PASSWORD
          echo ::add-mask::$PASSWORD
          echo After mask
          echo $PASSWORD

          echo Setting output
          # echo ::set-output name=secret::$PASSWORD
          echo Setting environment variables
          echo ARTIFACT_PASSWORD="$PASSWORD" >> $GITHUB_ENV

      - name: Check Tag
        run: |
          regex="^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[\!@#$%^&*?])[A-Za-z\d\!@#$%^&*?]{12,}$"

          if [[ $(echo ${{ inputs.password }} | grep -P "$regex") ]]; then
            echo "Input string matches the regex pattern."
          else
            echo "Input string does not match the regex pattern."
            exit 1
          fi

          if [[ $(echo ${{ env.ARTIFACT_PASSWORD }} | grep -P "$regex") ]]; then
            echo "Input string matches the regex pattern."
          else
            echo "Input string does not match the regex pattern."
            exit 1
          fi

          echo test string regex
          input_string="YourIn@put32StringHere"

          if [[ $(echo "$input_string" | grep -P "$regex") ]]; then
            echo "Input string matches the regex pattern."
          else
            echo "Input string does not match the regex pattern."
          fi

          echo "test"

          echo ${{ env.ARTIFACT_PASSWORD }} >> sas_token.txt


      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: SAS_TOKEN_${{ inputs.action }}
          path: sas_token.txt



      # - name: Checkout
      #   uses: actions/checkout@v3

      # - name: 'Az CLI login'
      #   uses: azure/login@v1
      #   with:
      #     client-id: ${{ secrets.AZURE_CLIENT_ID }}
      #     tenant-id: ${{ secrets.AZURE_TENANT_ID }}
      #     subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
     
      # - name: Generate SAS token
      #   run: |
      #     # end=`date -u -d "24 hours" '+%Y-%m-%dT%H:%MZ'`
      #     # sasToken=$(az storage account generate-sas \
      #     #   --permissions cdlruwap \
      #     #   --account-name "${{ inputs.storageaccount }}" \
      #     #   --services f \
      #     #   --resource-types sco \
      #     #   --expiry $end \
      #     #   --https-only \
      #     #   -o tsv) 

      #     end=`date -u -d "3 minutes" '+%Y-%m-%dT%H:%MZ'`
      #     sasToken=$(az storage account generate-sas \
      #       --permissions cdlruwap \
      #       --account-name "${{ inputs.storageaccount }}" \
      #       --services f \
      #       --resource-types sco \
      #       --expiry $end \
      #       --https-only \
      #       -o tsv) 

      #     # masks all output of sasToken
      #     echo "::add-mask::${sasToken}"

      #     echo "STORAGE_SAS_TOKEN=${sasToken}" >> $GITHUB_ENV
      #     echo "FILESHARE=dev" >> $GITHUB_ENV


      # - name: output SAS token
      #   run: |
      #     # SAS values
      #     echo "=========================================================================================================================================================="
      #     echo "| Variable   | Value       |"
      #     echo "| ---------- | ----------- |"
      #     echo "| SAS token  | ?${{ env.STORAGE_SAS_TOKEN }} |"
      #     echo "| File service SAS URL | https://${{ inputs.storageaccount }}.file.core.windows.net/?${{ env.STORAGE_SAS_TOKEN }} |"
      #     echo "| Fileshare SAS URL | https://${{ inputs.storageaccount }}.file.core.windows.net/${{ env.FILESHARE }}?${{ env.STORAGE_SAS_TOKEN }} |"
      #     echo "| Fileshare SAS URL | https://${{ inputs.storageaccount }}.file.core.windows.net/${{ inputs.fileshare }}?${{ env.STORAGE_SAS_TOKEN }} |"
      #     echo "=========================================================================================================================================================="
          
      #     {
      #       echo "### Workflow variables"
      #       echo "| Variable   | Value       |"
      #       echo "| ---------- | ----------- |"
      #       echo "| SAS token  | ?${{ env.STORAGE_SAS_TOKEN }} |"
      #       echo "| File service SAS URL | https://${{ inputs.storageaccount }}.file.core.windows.net/?${{ env.STORAGE_SAS_TOKEN }} |"
      #       echo "| Fileshare SAS URL | https://${{ inputs.storageaccount }}.file.core.windows.net/${{env.FILESHARE}}?${{ env.STORAGE_SAS_TOKEN }} |"
      #       echo "| Fileshare SAS URL | https://${{ inputs.storageaccount }}.file.core.windows.net/${{ inputs.fileshare }}?${{ env.STORAGE_SAS_TOKEN }} |"
      #     } >> $GITHUB_STEP_SUMMARY


      # - name: Check Tag
      #   run: |
      #     # if [[ ${{ inputs.password }} =~ ^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$])[A-Za-z\d!@#$]{12,}$ ]]; then
      #     #     # echo "match=true" >> $GITHUB_OUTPUT 
      #     #      echo "match=true"
      #     #       fi

      #     # echo "test"

      #     # if [[ ${{ env.ARTIFACT_PASSWORD }} =~ ^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$])[A-Za-z\d!@#$]{12,}$ ]]; then
      #     # # echo "match=true" >> $GITHUB_OUTPUT 
      #     #   echo "match=true"
      #     #   fi
