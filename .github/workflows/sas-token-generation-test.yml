on:
  workflow_dispatch:
    inputs:
      storageaccount:
        description: "Storage Account to create a SAS token for"
        type: string
        default: 'fileshareazcopy66e4bd71'
      fileshare:
        description: "Fileshare to create a SAS token for"
        type: string
        default: 'dev'
      password:
        description: "Password to use for the SAS token zip file"
        type: string
        default: ''
      action:
        description: "Password to use for the SAS token zip file"
        type: choice
        options:
          - 'read'
          - 'write'

name: Generate SAS token - test
run-name: Generate SAS token | ${{ inputs.storageaccount }} | ${{ inputs.fileshare }} | ${{ inputs.password }}
    
permissions:
  id-token: write
  contents: read

jobs:
  generate-sas-token:
    runs-on: ubuntu-latest
    environment: 'fakkel'
      
    steps:
      - name: Masking password
        run: |
          PASSWORD=$(jq -r '.inputs.password' $GITHUB_EVENT_PATH)

          echo Before mask
          echo $PASSWORD
          echo ::add-mask::$PASSWORD
          echo After mask
          echo $PASSWORD

          echo Setting output
          # echo ::set-output name=secret::$PASSWORD  
          echo Setting environment variables
          echo ARTIFACT_PASSWORD="$PASSWORD" >> $GITHUB_ENV

      - name: Check Tag
        run: |
          regex="^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[\!@#$%^&*?])[A-Za-z\d\!@#$%^&*?]{12,}$"

          if [[ $(echo ${{ inputs.password }} | grep -P "$regex") ]]; then
            echo "Input string matches the regex pattern."
          else
            echo "Input string does not match the regex pattern."
            exit 1
          fi

          # echo ${{ inputs.password }} >> sas_token.txt
          # zip -P "${{ inputs.password }}" "sas_token" "sas_token.txt"


      - name: 'Az CLI login'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
     
      - name: Generate SAS token
        run: |
          # endDate=`date -u -d "24 hours" '+%Y-%m-%dT%H:%MZ'`
          # sasToken=$(az storage account generate-sas \
          #   --permissions cdlruwap \
          #   --account-name "${{ inputs.storageaccount }}" \
          #   --services f \
          #   --resource-types sco \
          #   --expiry $endDate \
          #   --https-only \
          #   -o tsv) 

          endDate=`date -u -d "10 minutes" '+%Y-%m-%dT%H:%MZ'`
          sasToken=$(az storage account generate-sas \
            --permissions cdlruwap \
            --account-name "${{ inputs.storageaccount }}" \
            --services f \
            --resource-types sco \
            --expiry $endDate \
            --https-only \
            -o tsv) 

          # masks output of sasToken
          echo "::add-mask::${sasToken}"

          echo "STORAGE_SAS_TOKEN=${sasToken}" >> $GITHUB_ENV

          # Put values into file and zip

          cat <<EOF >sas_token.txt
            Type of Token: ${{ inputs.action }}
            End date: ${endDate}
            SAS token: ?${sasToken}
          EOF

          # echo ${sasToken} >> sas_token.txt
          zip -P ${{ inputs.password }} "sas_token" "sas_token.txt"

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: SAS_TOKEN_${{ inputs.action }}
          path: sas_token.txt

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: SAS_TOKEN_${{ inputs.action }}_ZIP
          path: sas_token.zip


      - name: output SAS token
        run: |
          {
            echo "### Workflow variables"
            echo "| Variable   | Value       |"
            echo "| ---------- | ----------- |"
            echo "| SAS token  | ${{ env.STORAGE_SAS_TOKEN }} |"
            echo "| File service SAS URL | https://${{ inputs.storageaccount }}.file.core.windows.net/${{ env.STORAGE_SAS_TOKEN }} |"
            echo "| Fileshare SAS URL | https://${{ inputs.storageaccount }}.file.core.windows.net/${{ inputs.fileshare }}${{ env.STORAGE_SAS_TOKEN }} |"
          } >> $GITHUB_STEP_SUMMARY
