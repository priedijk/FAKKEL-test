on:
  workflow_dispatch:
    inputs:
      storageaccount:
        description: "The Storage Account to create a SAS token for."
        type: string
        default: ""
      fileshare:
        description: "The Fileshare to create a SAS token for."
        type: string
        default: ""
      container:
        description: "The Blob container to create a SAS token for."
        type: string
        default: ""
      password:
        description: "The Password to use for the SAS token zip file."
        type: string
        default: ""
      access:
        description: "The access the SAS token should have."
        type: choice
        options:
          - "read"
          - "write"
      validity:
        description: "The validity of the SAS token in days."
        type: string
        default: "7"

name: Script input output test
run-name: script | ${{ inputs.storageaccount }} | ${{ inputs.fileshare }} ${{ inputs.container}} | ${{ inputs.password }}

permissions:
  id-token: write
  contents: read
  issues: write

jobs:
  generate-sas-token:
    runs-on: ubuntu-latest
    environment: "fakkel"

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Mask password
        id: password_masking
        run: |
          PASSWORD=$(jq -r '.inputs.password' $GITHUB_EVENT_PATH)
          echo ::add-mask::$PASSWORD

      - name: "Az CLI login"
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # - name: Generate SAS token
      #   shell: bash
      #   run: ./scripts/input_output.sh \
      #     ${{ inputs.storageaccount }} \
      #     ${{ inputs.fileshare }} \
      #     ${{ inputs.container }} \
      #     ${{ inputs.password }} \
      #     ${{ inputs.access }} \
      #     ${{ inputs.validity }}

      - name: Script test
        shell: pwsh
        run: |
          ./scripts/input_output.ps1 `
          -storageAccountName ${{ inputs.storageaccount }} `
          -fileShareName "${{ inputs.fileshare }}" `
          -containerName "${{ inputs.container }}" `
          -zipPassword ${{ inputs.password }} `
          -tokenAccess ${{ inputs.access }} `
          -tokenValidity ${{ inputs.validity }}

      # - name: Generate SAS token
      #   uses: ./.github/actions/sas-token-generation-zip
      #   with:
      #     storageaccount: ${{ inputs.storageaccount }}
      #     fileshare: ${{ inputs.fileshare }}
      #     container: ${{ inputs.container }}
      #     password: ${{ inputs.password }}
      #     access: ${{ inputs.access }}
      #     validity: ${{ inputs.validity }}
