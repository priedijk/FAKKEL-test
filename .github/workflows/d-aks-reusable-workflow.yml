on:
  workflow_call:
    inputs:
      terraform-action:
        description: 'Terraform action'
        type: string
        required: true
      confirm-destroy:
        description: "Confirm distroy"
        type: string
        required: true
      post-provisioning:
        description: "post-provisioning?"
        type: string
        required: true
      terraform-directory:
        description: "Directory with Terraform files to apply"
        type: string
        required: true
      terraform-init-args:
        description: "args to set as TF_CLI_ARGS_init"
        type: string
        required: true
      terraform-plan-args:
        description: "args to set as TF_CLI_ARGS_plan"
        type: string
        default: ''
      terraform-apply-args:
        description: "args to set as TF_CLI_ARGS_apply"
        type: string
        default: ''

permissions:
  id-token: write
  contents: read

jobs:
  terraform-deploy:
    runs-on: ubuntu-latest
    environment: 'fakkel'
  
    env:
      TF_CLI_ARGS_init: ${{ inputs.terraform-init-args }}
      TF_CLI_ARGS_plan: ${{ inputs.terraform-plan-args }}
      TF_CLI_ARGS_apply: ${{ inputs.terraform-apply-args }}
      TF_CLI_ARGS_destroy: ${{ inputs.terraform-apply-args }}
      TF_VAR_environment: ${{ inputs.environment }}
      TF_VAR_location_code: ${{ inputs.location }}
      TF_VAR_new_deployment: ${{ inputs.IsNewDeployment }}
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  
    steps:
      - name: Log inputs
        run: |
          echo "Running with the following input:"
          echo "${{ toJSON(inputs) }}"

      - name: Checkout
        uses: actions/checkout@v3
      
      - name: 'Az CLI login'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Terraform Format
        id: fmt
        run: |
          terraform -chdir=${{inputs.terraform-directory}} fmt -check

      - name: Terraform Init
        id: init
        run: |
          terraform -chdir=${{inputs.terraform-directory}} init \
            -backend-config="resource_group_name=tffakkeltest" \
            -backend-config="storage_account_name=tffakkeltest"

      - name: Terraform Validate
        id: validate
        run: |
          terraform -chdir=${{ inputs.terraform-directory }} validate

      - name: Terraform Import
        if: inputs.terraform-action == 'import'
        id: terraform-import
        shell: pwsh
        run: |
          ./import/${{ inputs.terraform-import-file }}.ps1 `
            -subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} `
            -location ${{ inputs.location }} `
            -terraformdir ${{ inputs.terraform-directory }}

      - name: Terraform Plan
        id: plan
        if: inputs.terraform-action != 'import'
        run: |
          terraform -chdir=${{ inputs.terraform-directory }} plan -input=false

      - name: Terraform Apply
        if: inputs.terraform-action == 'plan+apply'
        run: |
          terraform -chdir=${{ inputs.terraform-directory }} apply -auto-approve -input=false

      - name: Terraform Destroy
        if: inputs.terraform-action == 'destroy' && inputs.confirm-destroy
        run: |
          terraform -chdir=${{ inputs.terraform-directory }} destroy -auto-approve -input=false

      - name: Export Terraform output
        if: inputs.post-provisioning == 'true'
        shell: bash
        run: |
          echo "output"
          terraform -chdir=${{ inputs.terraform-directory }} output resourcegroup
          echo "raw output"
          terraform -chdir=${{ inputs.terraform-directory }} output -raw resourcegroup
          # echo "export vars"
          # IDENTITY_RESOURCE_GROUP1="$(terraform -chdir=${{ inputs.terraform-directory }} output resourcegroup)"
          # IDENTITY_RESOURCE_GROUP2="$(terraform -chdir=${{ inputs.terraform-directory }} output -raw resourcegroup)"
          # export IDENTITY_RESOURCE_GROUP3="$(terraform -chdir=${{ inputs.terraform-directory }} output resourcegroup)"
          
          # echo "echo vars Identities"
          # echo $IDENTITY_RESOURCE_GROUP1
          # echo $IDENTITY_RESOURCE_GROUP2
          # echo $IDENTITY_RESOURCE_GROUP3

          export CHDIR=${{ inputs.terraform-directory }}
          echo $CHDIR
          ./aks/xpost-provioning.sh


      - name: AKS post-provisioning
        if: inputs.post-provisioning == 'true'
        run: ./aks/xpost-provioning.sh
