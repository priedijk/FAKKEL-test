on:
  workflow_call:
    inputs:
      location:
        description: "Hub Location (weu / frc)"
        type: string
        required: true
      tenant:
        description: "GitHub tenant to deploy to (ae / prod)"
        type: string
        default: 'ae'
      terraform-action:
        description: 'Terraform action'
        type: string
        required: true
      confirm-destroy:
        description: "Confirm distroy"
        type: string
        required: true
      terraform-directory:
        description: "Directory with Terraform files to apply"
        type: string
        required: true
      terraform-init-args:
        description: "args to set as TF_CLI_ARGS_init"
        type: string
        required: true
      terraform-plan-args:
        description: "args to set as TF_CLI_ARGS_plan"
        type: string
        default: ''
      terraform-apply-args:
        description: "args to set as TF_CLI_ARGS_apply"
        type: string
        default: ''
      terraform-import-file:
        description: "Name of the terraform import file. Use the statefile name without location (<statefileName>.ps1)"
        type: string
        default: ''
      IsNewDeployment:
        description: "Initial foundation deployment ...... (should be true during the initial deployment of both hubs (weu & frc). A second deployment is needed after the initial deployment has been done for each hub)"
        type: string
        default: 'false'

permissions:
  id-token: write
  contents: read
  issues: write 

jobs:
  terraform-deploy:
    strategy:
        matrix:
          location: [weu, frc]
          environment: [ae, prod]
          
    runs-on: ubuntu-latest
    environment: 'fakkel'
  
    env:
      TF_CLI_ARGS_init: ${{ inputs.terraform-init-args }}
      TF_CLI_ARGS_plan: ${{ inputs.terraform-plan-args }}
      TF_CLI_ARGS_apply: ${{ inputs.terraform-apply-args }}
      TF_CLI_ARGS_destroy: ${{ inputs.terraform-apply-args }}
      TF_VAR_environment: ${{ inputs.environment }}
      TF_VAR_location_code: ${{ matrix.location }}
      TF_VAR_new_deployment: ${{ inputs.IsNewDeployment }}
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_USE_OIDC: true
      VPN_SECRET: ${{ matrix.location == 'weu' && secrets.SECRET_KEY || secrets.SECRET_KEY2 }}
  
    steps:
      - name: '${{ github.ref_name }} to ${{ matrix.location }} ${{ matrix.environment }}'
        run: echo ""
        
      - name: Log inputs
        run: |
          echo "Running with the following input:"
          echo "${{ toJSON(inputs) }}"

      - name: Checkout
        uses: actions/checkout@v3

      - name: 'Az CLI login'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get current date
        id: date
        run: |
          echo "date=$(date +'%d-%m-%Y')" >> $GITHUB_ENV  

      # API call to create ISSUE, requires Token in github
      # - name: GIthub Issue API call
      #   run: |
      #     curl \
      #     -X POST \
      #     -H "Accept: application/vnd.github+json" \
      #     -H "Authorization: Bearer ${{ secrets.BEARER_TOKEN }}" \
      #     -H "X-GitHub-Api-Version: 2022-11-28" \
      #     https://api.github.com/repos/priedijk/FAKKEL-test/issues \
      #     -d '{"title":"Terraform drift detected (${{ env.date }})","body":"I'\''m having a problem. Terraform drift detected: \n branch ${{ github.ref_name }} in ${{ matrix.environment }}-${{ matrix.location }}  run number ${{ github.run_id }} \n [Failed Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) \n [Codebase](https://github.com/${{ github.repository }}/tree/${{ github.sha }}).","assignees":["priedijk"],"labels":["bug"]}'

      - name: Set workflow environment variables
        run: ./scripts/set-workflow-env-variables.sh ${{ matrix.environment }} ${{ matrix.location }} ${{ inputs.IsNewDeployment }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Terraform Format
        id: fmt
        run: |
          terraform -chdir=${{inputs.terraform-directory}} fmt -check

      - name: Terraform Init
        id: init
        run: |
          terraform -chdir=${{inputs.terraform-directory}} init \
            -backend-config="resource_group_name=tfstatetestfakkel" \
            -backend-config="storage_account_name=tfstatetestfakkel"

      - name: Terraform Validate
        id: validate
        run: |
          terraform -chdir=${{ inputs.terraform-directory }} validate

      - name: Terraform Import
        if: inputs.terraform-action == 'import'
        id: terraform-import
        shell: pwsh
        run: |
          ./import/${{ inputs.terraform-import-file }}.ps1 `
            -subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} `
            -location ${{ inputs.location }} `
            -terraformdir ${{ inputs.terraform-directory }}

      - name: Terraform Plan
        id: plan
        if: inputs.terraform-action != 'import'

        run: |
          # terraform -chdir=${{ inputs.terraform-directory }} plan -input=false -detailed-exitcode
          terraform -chdir=${{ inputs.terraform-directory }} plan -input=false -out=plan

          if [ $? -eq 0 ]; then
              echo "No changes, not applying"
          elif [ $? -eq 1 ]; then
              echo "Terraform plan failed"
              exit 1
          elif [ $? -eq 2 ]; then
              echo "Terraform apply needed"
          fi
          
      - name: Terraform Apply
        if: inputs.terraform-action == 'plan+apply'
        run: |
          terraform -chdir=${{ inputs.terraform-directory }} apply "plan"
          # -auto-approve -input=false

      - name: Terraform Destroy
        if: inputs.terraform-action == 'destroy' && inputs.confirm-destroy
        run: |
          terraform -chdir=${{ inputs.terraform-directory }} destroy -auto-approve -input=false
